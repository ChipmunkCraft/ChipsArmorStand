plugins {
    id 'net.neoforged.moddev' version '2.0.78'
    id 'eclipse'
}

group = mod_group
version = mod_version

repositories {
    mavenLocal()
    maven { url = 'https://maven.neoforged.net/releases' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1' }
    maven { url = "https://maven.theillusivec4.top/" }
}
dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation "me.djtheredstoner:DevAuth-neoforge:1.2.1"
    implementation "maven.modrinth:obsidianui:0.2.7+mc1.21-neoforge"
    implementation files("${System.getProperty('user.home')}/.m2/repository/org/thinkingstudio/ryoamiclights/RyoamicLights-neoforge/${ryoamiclights_version}/RyoamicLights-neoforge-${ryoamiclights_version}.jar")
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_target)
    }
    withSourcesJar()
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add '-parameters'
    options.encoding = 'UTF-8'
}

ext {
    jar_name_start = "${mod_id}-${mod_version}"
    jar_name_mcnf_versions = "-mc-${minecraft_version}-nf-${neoforge_version}"
}

neoForge {
    version = neoforge_version

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }
    runs {
        client {
            client()
            jvmArguments.add('-Ddevauth.enabled=true')
            jvmArguments.add('-Ddevauth.configDir=C:/Users/deoxd/.devauth')
            jvmArguments.add('-Ddevauth.account=main')
        }
        server {
            server()
            programArguments.addAll '--nogui'
        }
        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', file('src/generated/resources').absolutePath, file('src/main/resources').absolutePath
            
        }
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

def archives_name = jar_name_start
if (hasProperty('mod_appendix')) {
    archives_name += "-${mod_appendix}"
}
archives_name += jar_name_mcnf_versions

base {
    archivesName = archives_name
}

tasks.named('jar') {
    version = ''  // Prevent version suffix
}

tasks.named('build') {
    doLast {
        copy {
            from "${buildDir}/libs"
            into rootProject.file('finalJars')
            include '*.jar'
        }
    }
}

tasks.named('runClient') {
    doFirst {
        delete fileTree('/run/logs') {
            include '*.gz'
        }
    }
}

neoFormRuntime {
    useEclipseCompiler = true
    enableCache = true
    // verbose = true
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neoforge_version        : neoforge_version,
            neoforge_version_range  : neoforge_version_range,
            loader_version          : loader_version,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_version             : mod_version,
            mod_license             : mod_license,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
            mod_display_url         : mod_display_url,
            mod_issue_tracker_url   : mod_issue_tracker_url,
            curios_version          : curios_version,
            ryoamiclights_version   : ryoamiclights_version
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Sync processed resources to bin/main after compilation
tasks.named('compileJava') {
    dependsOn processResources
    doLast {
        // Copy processed neoforge.mods.toml to bin/main
        copy {
            from processResources.destinationDir
            into 'bin/main'
            include 'META-INF/neoforge.mods.toml'
        }
    }
}

// Custom tasks
task cleanAll {
    description 'Cleans all projects, leaving run/ and finalJars/ intact'
    dependsOn tasks.named('clean')
    subprojects.each { subproj ->
        dependsOn "${subproj.path}:clean"
    }
}

task buildAll {
    description 'Builds all projects, copying JARs to finalJars/'
    dependsOn tasks.named('build')
    subprojects.each { subproj ->
        dependsOn "${subproj.path}:build"
    }
}